<snippet>
    <content><![CDATA[
from twisted.internet import defer

from buildbot.status.results import SUCCESS

from cactus.test_utils.cactus_test_case import CactusTestCase
from cactus.test_utils.step_test_utils import CactusBuildStubMixin
from cactus.steps.${1:name_of_the_tested_step_file} import ${2:NameOfTheTestedStepClass}


class UnderTest${2:NameOfTheTestedStepClass}(${2:NameOfTheTestedStepClass}):
        pass


class Test${2:NameOfTheTestedStepClass}(CactusTestCase, CactusBuildStubMixin):

    def setUp(self):
        additional_cfg = {}
        return self.createAllStubs(createArtifactory=False,
                                   createBugzilla=False,
                                   createIceScrum=False,
                                   additionalCfg=additional_cfg)

    def tearDown(self):
        return self.cleanupAllStubs(cleanArtifactory=False,
                                    cleanBugzilla=False,
                                    cleanIceScrum=False,
                                    )

    def _createStep(self):
        additional_props = {}
        self.step = UnderTest${2:NameOfTheTestedStepClass}()
        self.configureBuild(self.step, additionalProps=additional_props)

    # @CactusTestCase.verboseLogging()
    @defer.inlineCallbacks
    def testGivenSuchCase_ExpectSuccess(self):
        self._createStep()
        yield self.step.start()

        self.assertEqual(self.step.getStepStatus(), SUCCESS)

]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>unittestcactusstep</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.python</scope>
    <description>Unit test for a Cactus Step</description>
</snippet>
